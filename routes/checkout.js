// CHECKOUT ROUTE

const express = require('express')
const router = express.Router()
const Cart = require('./../models/Cart')
const Order = require('./../models/Order') 
const path = require('path')

// checkout route
router.get('/', (req, res) => {
    
    // check if cart is set already (in session store)
    if (!req.session.cart) {
        return res.status(400).json({
            message: "Your cart is empty"
        })
    }
    // cart exists:
    var cart = new Cart(req.session.cart); // create a new cart off the one stored in the session
    res.json(cart);
})

// checkout POST route - charge the user (Stripe)
router.post('/', async (req, res) => { 
    // validate  - check that request body isn't empty
    if(Object.keys(req.body).length === 0){   
        return res.status(400).send({message: "User/card information can't be empty"})
      }
    console.log('req.body = ', req.body) // console log request body

    // check if cart is set already (in session store)
    if (!req.session.cart) {
        return res.status(400).json({
            message: "Your cart is empty"
        })
    }
    // cart exists:
    var cart = new Cart(req.session.cart); // create a new cart off the one stored in the session

    // Frontend validates user card information via the Stripe server and encrypts it using a publishable key
    var stripe = require('stripe')(     // This secret key allows the server to decrypt it and charge the user's card:
        'sk_test_51IlvwoCM9bBMeA8HCEAu6g4u1BqKSe7h3HB2YHlxegxsTnfnIXUM4xkAr7yDvdku63CIP87ri74icCY7Q5wBmJDd00xTGYPyLY'
    )
    
    // Charge the user's card
    const charge = await stripe.charges.create({
        amount: cart.totalPrice * 100, // needs to be in cents
        currency: 'gbp',
        source: req.body.stripeToken, // Stripe token generated by Stripe STK when validating the credit card. Send in checkout form.
        //source: 'tok_visa', // token for testing (from https://stripe.com/docs/testing#cards)
        description: 'Stripe Charge'
    }, function(err, charge) {
        if (err) {
            console.log(err)
            return res.status(500).send({
                message: "Problem with charging your card",
                error: err
            })
        }
        // Create a new Order:
        // 1. configure the order object
        var order = new Order({
          // req.body = where express stores values sent in the post request (from frontend checkout form)
          userName: req.body.userName,
          userEmail: req.body.userEmail,
          userNumber: req.body.userNumber,
          address: req.body.address,
          cart: cart, // user's cart
          paymentID: charge.id // retrieved from the charge object (created by Stripe)
        }) 
        // 2. Save it to the database
        order.save()
        .then(order => {        
            // success! return 201 status with order object
            return res.status(201).json(order)
        })
        .catch(err => {
            console.log(err)
            return res.status(500).send({
            message: "Problem creating your order",
            error: err
            })
        })
        req.session.cart = null; // empties cart
    })
})

// EXPORT the router object 
// (imported in server.js in 'ROUTES' section)
module.exports = router